/*
Contexte :
Tu g√®res l‚Äôhistorique de navigation d‚Äôun navigateur. Chaque nouvelle page visit√©e est ajout√©e √† la fin de l‚Äôhistorique.

Consigne :
Cr√©e un tableau historique = []
Cr√©e une fonction ajouterPage(url) qui ajoute une URL √† la fin avec push()
Ajoute 3 pages, puis affiche tout l‚Äôhistorique dans la console.
*/

let historique = [];
function ajouterPage(url){
    historique.push("www.google.com");
    historique.push("www.facebook.com");
    historique.push("www.instagram.com");
}
ajouterPage();
console.log(historique);





/*Contexte :
Tu construis une playlist musicale. L‚Äôutilisateur ajoute des morceaux au d√©but de la liste (fonction unshift()).

Consigne :
Cr√©e un tableau playlist
Cr√©e une fonction ajouterMorceauDebut(morceau) qui ajoute au d√©but de la liste
Ajoute quelques morceaux, puis utilise une boucle pour afficher la playlist avec une num√©rotation.
*/

let playlist = [];
function ajouterMorceauDebut(morceau){
    playlist.unshift("Joseph Kamel - Celui qui part");
    playlist.unshift("David Kushner - Daylight");
    playlist.unshift("Jennifer Lopez - Let's get loud");
    playlist.unshift("Lola Young - Messy");
    playlist.unshift("Taylor Swift - AntiHero");
}
ajouterMorceauDebut();
for(let i = 0; i<playlist.length; i++){
    console.log("Le morceau n¬∞"+(i+1)+": "+playlist[i]);
}


/*
Contexte :
Tu g√®res une liste de fichiers r√©cemment supprim√©s. Le plus ancien doit √™tre supprim√© en premier (FIFO ü°™ First In First Out).

Consigne :
Cr√©e un tableau corbeille = ["photo1.png", "doc2.pdf", "image3.jpg"]
Cr√©e une fonction viderCorbeille() qui supprime le premier √©l√©ment avec shift() et affiche ce qui reste
Appelle la fonction 2 fois et affiche la corbeille apr√®s chaque suppression.
*/

let corbeille = ["photo1.png", "doc2.pdf", "image3.jpg"];
function viderCorbeille(){
    corbeille.shift();
    console.log(corbeille);
}
viderCorbeille();
console.log(corbeille);
viderCorbeille();
console.log(corbeille);



/*
Contexte :
Un utilisateur peut mettre √† jour ou compl√©ter ses informations via un formulaire.

Consigne :
Cr√©e un objet utilisateur = { nom: "Sarah", ville: "Lyon" }
Cr√©e une fonction mettreAJourProfil(cle, valeur) :
Si la propri√©t√© existe, la mettre √† jour
Sinon, l‚Äôajouter
Teste avec : mettreAJourProfil("email", "sarah@mail.com") puis mettreAJourProfil("ville", "Paris")
Affiche l‚Äôobjet apr√®s chaque modification
*/

let utilisateur = {
    nom: "Sarah",
    ville: "Lyon"
}
function mettreAJourProfil(cle, valeur){
    if (utilisateur[cle]){ // on test si la cl√© re√ßu on utilise [] car variable, on utilise . si valeur connue
        utilisateur[cle] = valeur;
    }else{
        utilisateur[cle] = valeur;
    }
    console.log(utilisateur);
}
mettreAJourProfil("email", "sarah@mail.com");
mettreAJourProfil("ville", "Paris");




/*
Contexte :
Tu veux anonymiser un objet avant de l‚Äôenvoyer √† un service externe.

Consigne :
Cr√©e un objet client = { nom: "Jean", email: "jean@mail.com", tel: "0600000000" }
Cr√©e une fonction supprimerPropriete(obj, propriete) :
V√©rifie si la propri√©t√© existe (in)
Si oui, supprime-la (delete) et affiche un message
Sinon, affiche un message d‚Äôerreur
Teste avec supprimerPropriete(client, "tel") puis avec "adresse"
*/

let client = { nom: "Jean", email: "jean@mail.com", tel: "0600000000" }
function supprimerPropriete(obj, propriete){
    if (propriete in client){
            delete client[propriete];
            console.log("√Ä √©t√© supprim√©");
    }else{
        console.log("Erreur");
    }
}
supprimerPropriete(client, "tel");
console.log(client);
supprimerPropriete(client, "adresse");


/*
Contexte :
Tu veux g√©rer les commandes clients avec un tableau d‚Äôobjets.

Consigne :
Cr√©e un tableau commandes contenant 3 objets avec : client, produit, quantite
Cr√©e une fonction totalArticles() qui retourne la quantit√© totale command√©e
Cr√©e une fonction ajouterCommande(client, produit, quantite) qui ajoute une commande √† la fin du tableau
Teste l‚Äôajout et affiche la quantit√© totale apr√®s chaque ajout.
*/
let commandes = [
    {client: "Dainata", produit: "jupe", quantite: 3},
    {client: "Aurelien", produit: "pantalon", quantite: 5},
    {client: "Anastasia", produit: "manteau", quantite: 7}
];
let total = 0
function totalArticles(){
    for (let i = 0;i < commandes.length; i++ ){
        total += commandes[i].quantite;
    }
}
function ajouterCommande(client, produit, quantite){
    let commande = {client,produit,quantite};
    commandes.push(commande);
}
//totalArticles();
console.log(total);
ajouterCommande("Chloe","robe",6);
console.log(commandes);
totalArticles();
console.log(total);
